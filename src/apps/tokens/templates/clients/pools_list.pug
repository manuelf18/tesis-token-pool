extends base_landing
-load static

block extra_css
    link(href='{% static "pages/plugins/pace/pace-theme-flash.css" %}', rel='stylesheet', type='text/css')
    link(href='{% static "pages/css/pages-icons.css" %}', rel='stylesheet', type='text/css')
    link(href='{% static "css/pools/list.css" %}', rel='stylesheet', type='text/css')
    link(href='https://fonts.googleapis.com/css?family=Montserrat:300,400&display=swap', rel='stylesheet')


block content
    .main-cont.h-100
        .row
            .col-12
                h1 Lista de pozos
        .row
            .col-12
                //- table#tableWithSearch.table.table-hover.demo-table-search.table-responsive-block.dataTable.no-footer(role='grid')
                //-     thead
                //-         tr(role='row')
                //-             th Nombre del Pozo
                //-             th Nombre del Token
                //-             th Fecha de apertura
                //-             th Cantidad de ofertas
                //-         tbody
                if pools|length is 0
                    span#no-offers.m-t-30 No hay pozos disponibles
                each pool in pools
                    #{pool}
                    if pool.open
                        .flex.pool-list
                            .card.col-8.flex-horizontal-center
                                .card-body
                                    .row
                                        .col-sm-12.col-md-7.text-justify
                                            .row
                                                .title
                                                    span #{pool.poolName}
                                            .row
                                                .sub-title
                                                    span.label.label-info Abierto: #{pool.startDate}
                                            .row.m-t-20.pr-md-3
                                                span.qty-offers Cantidad de ofertas: #{pool.amountOfOffers}
                                        .col-sm-12.col-md-5.text-right
                                            if pool.amountOfOffers > 0
                                                a.btn.btn-green.btn-block.m-t-20(href="{% url 'tokens:pools-offers-list' key=pool.key %}") Ver ofertas
                                            a.btn.btn-danger.btn-block.m-t-20(href="{% url 'tokens:pools-offers-create' key=pool.key %}") Crear nueva oferta


block extra_js
    script(src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js")
    script(src='{% static "js/Contract.js" %}')
    script(src="{% static 'pages/plugins/Datatables/datatables.min.js' %}", type='text/javascript')
    script(src="{% static 'pages/plugins/jquery-datatable/media/js/jquery.dataTables.min.js' %}", type='text/javascript')
    script(src="{% static 'pages/plugins/jquery-datatable/extensions/TableTools/js/dataTables.tableTools.min.js' %}", type='text/javascript')
    script(src="{% static 'pages/plugins/jquery-datatable/media/js/dataTables.bootstrap.js' %}", type='text/javascript')
    script(src="{% static 'pages/plugins/jquery-datatable/extensions/Bootstrap/jquery-datatable-bootstrap.js' %}", type='text/javascript')

    script.
        (function (){
            var App = {
                Controls: {
                    table: $('#tableWithSearch'),
                },
                init: async function(){
                    App.Methods.initTable();
                    await App.Methods.setDataToTable();
                    App.bindEvents();
                },
                bindEvents: function(){
                    $('tbody > tr').on('click', App.eventListeners.onRowClick);
                },
                eventListeners:{
                    onRowClick: function(ev){
                        const id = $(this).data('id');
                        if(id === undefined){
                            Swal.fire({type:'error', title:'id no definido'});
                            return;
                        }
                        window.location.href = `pools/${id}`;
                    },
                },
                Methods: {
                    initTable: function(){
                        const SETTINGS = {
                            "order": [],
                            "sDom": "<t><'row'<p i>>",
                            "destroy": true,
                            "scrollCollapse": true,
                            "responsive": true,
                            "createdRow": function( row, data, dataIndex){
                                $(row).attr('data-id', dataIndex + 1);
                            },
                            "oLanguage": {
                                "sLengthMenu": "Mostrar _MENU_ entradas",
                                "sInfo": "Mostrando <b>_START_ hasta _END_</b> de _TOTAL_ entradas",
                                "sInfoEmpty": "-",
                                "sInfoFiltered": " - filtrando de _MAX_ entradas",
                                "sEmptyTable": "No hay datos disponible en la tabla",
                                "sSearch": "Filtrar entradas"
                            },
                            "columnDefs": [
                            ],
                            "iDisplayLength": 10
                        };
                        App.Controls.table.DataTable(SETTINGS);
                    },
                    setDataToTable: async function(){
                        try {
                            let keys = [];
                            {% for key in keys %}
                                keys.push('{{key}}');
                            {% endfor %}
                            if(!keys) return;
                            let networkId = 5777;
                            let resp = await App.Requests.getContractJSON();
                            const { abi } = resp
                            const { address } = resp['networks'][networkId];
                            const contract = new PoolContractV2(abi, networkId, address);
                            await contract.setContract();
                            const pools = await contract.getAllPools(keys);
                            const table = App.Controls.table.DataTable();
                            for (const pool of pools){
                                if(pool['4'] === true){
                                    table.row.add( [
                                    pool['0'],
                                    pool['1'],
                                    new Date(pool['3']*1000),
                                    pool['offers']
                                    ] ).draw( false );
                                }
                            }
                        }
                        catch(e){
                            console.log(e);
                            return;
                        }
                    },
                },
                Requests: {
                    getContractJSON: function(){
                        return $.ajax({
                            method: 'GET',
                            url: '/static/json/PoolManager.json'
                        });
                    },
                },
            }
            App.init();
        })()
