extends base_landing
-load static

block extra_css
    link(href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.css", rel='stylesheet', type='text/css')
    link(href="https://cdn.datatables.net/1.10.19/css/dataTables.semanticui.min.css", rel='stylesheet', type='text/css')

    style.
        body{
            height:100%;
        }
        tr{
            cursor: pointer;
        }
        tr:hover{
            background-color: #1abc9c;
        }


block content
    .container.d-flex.flex-column
        section#about.page-section
            table#tableWithSearch(class='ui celled table', style='width:100%')
                thead
                    tr(role='row')
                        th Nombre del Pozo
                        th Nombre del Token
                        th Cantidad de Tokens actuales
                        th Valor
                tbody

block extra_js
    script(src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js")
    script(src='{% static "js/Contract.js" %}')
    script(src="{% static 'pages/plugins/Datatables/datatables.min.js' %}", type='text/javascript')
    script(src='https://cdn.datatables.net/1.10.19/js/dataTables.semanticui.min.js')   
    script(src='https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.js')    
    script(src='https://cdn.datatables.net/responsive/2.1.0/js/dataTables.responsive.js')
    script.
        (function (){
            var App = {
                Controls: {
                    table: $('#tableWithSearch'),
                },
                init: async function(){
                    App.Methods.initTable();
                    await App.Methods.setDataToTable();
                    App.bindEvents();
                },
                bindEvents: function(){
                    $('tbody > tr').on('click', App.eventListeners.onRowClick);
                },
                eventListeners:{
                    onRowClick: function(ev){
                        const id = $(this).data('id');
                        if(id === undefined){
                            Swal.fire({type:'error', title:'id no definido'});
                            return;
                        }
                        window.location.replace(`pools/${id}`);
                    },
                },
                Methods: {
                    initTable: function(){
                        const SETTINGS = {
                            "order": [],
                            "sDom": "<t><'row'<p i>>",
                            "destroy": true,
                            "scrollCollapse": true,
                            "responsive": true,
                            "createdRow": function( row, data, dataIndex){
                                $(row).attr('data-id', dataIndex + 1);
                            },
                            "oLanguage": {
                                "sLengthMenu": "Mostrar _MENU_ entradas",
                                "sInfo": "Mostrando <b>_START_ hasta _END_</b> de _TOTAL_ entradas",
                                "sInfoEmpty": "No hay entradas que mostrar",
                                "sInfoFiltered": " - filtrando de _MAX_ entradas",
                                "sEmptyTable": "No hay datos disponible en la tabla",
                                "sSearch": "Filtrar entradas"
                            },
                            "columnDefs": [
                            ],
                            "iDisplayLength": 10
                        };
                        App.Controls.table.DataTable(SETTINGS);
                    },
                    setDataToTable: async function(){
                        try {
                            let networkId = 5777;
                            let resp = await App.Requests.getContractJSON();
                            const { abi } = resp
                            const { address } = resp['networks'][networkId];
                            const contract = new PoolContract(abi, networkId, address);
                            await contract.setContract();
                            const pools = await contract.getAllPools();
                            const table = App.Controls.table.DataTable();
                            for (const pool of pools){
                                if(pool['5'] === false){
                                    table.row.add( [
                                    pool['1'],
                                    pool['0'],
                                    pool['2'],
                                    pool['4'],
                                    ] ).draw( false );
                                }
                            }
                        }
                        catch(e){
                            console.log(e);
                            return;
                        }
                    },
                },
                Requests: {
                    getContractJSON: function(){
                        return $.ajax({
                            method: 'GET',
                            url: '/static/json/PoolManager.json'
                        });
                    },
                },
            }
            App.init();
        })()
