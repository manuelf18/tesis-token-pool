extends base_landing
-load static utils


block extra_css
    link(href='{% static "pages/plugins/pace/pace-theme-flash.css" %}', rel='stylesheet', type='text/css')
    link(href='{% static "pages/css/pages-icons.css" %}', rel='stylesheet', type='text/css')
    link(href='{% static "css/pools/offer-create.css" %}', rel='stylesheet', type='text/css')
    link(href='https://fonts.googleapis.com/css?family=Montserrat:300,400&display=swap', rel='stylesheet')

block content
    .main-cont.h-100
        .row
            .col-12
                .title
                    h1 Crear nueva oferta
                .subtitles
                    span Actualmente conectado desde:
                    span#userAddress(style='color:green')
                    br
                    span Cantidad #{object.tokenName}s disponible:
                    span#amountOfTokensAvailable(style='color:green')
        .row
            .col-8
                .card.card-default(style='border:2px solid lightgray;')
                    .card-header
                        span Ingrese los siguientes datos:
                    .card-body
                        .row
                            .col-6
                                .form-group.form-group-default
                                    label(for="value") Valor de los tokens
                                    input#value.form-control(type="number", name="value")
                            .col-6
                                .form-group.form-group-default
                                    label(for="amount") Cantidad de tokens
                                    input#amount.form-control(type="number", name="amount")
                        .row
                            .col-12
                                .form-group.form-group-default
                                    label(for="email") Correo
                                    input#email.form-control(type="email", name="email")
                        .row.m-t-20
                            .col-12
                                .float-right
                                    button.btn.btn-green.js-create-offer-btn(type='button') Crear nueva oferta
                
            .col-4
                .card.card-default(style='border:2px solid lightgray;')
                    .card-header
                        h3 Consejos para una buena oferta
                    .card-body
                        ol
                            li Mira los precios de las otras ofertas
                            li 







                    //-     h2 Mejor oferta
                    //- .card-body
                    //-     if offerStats
                    //-         p(style='color:black') #{offerStats.lowest_offer.qty} tokens por #{offerStats.lowest_offer.value|currency}
                    //-     else
                    //-         p(style='color:black') No existen ofertas todavía.


block extra_js
    script(src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js")
    script(src='{% static "js/Contract.js" %}')
    script(src="{% static 'pages/plugins/sweetalert/sweetalert.min.js' %}")
    script.
        (function(){
            var App = {
                Controls: {
                    createOfferBtn: $('.js-create-offer-btn'),
                    userAddress: $('#userAddress'),
                    userTokensAvailable: $('#amountOfTokensAvailable'),
                    poolContract: null,
                    tokenContract: null,
                },
                Methods:  {
                    init: async function(){
                        try{
                            await App.Methods.initContract();
                            await App.Methods.initNetworkData();
                            App.Methods.bindEvents();
                        }catch(e){
                            console.log(e);
                        }
                    },
                    initContract: async function(){
                        try{
                            let networkId = 5777;
                            let poolContractJSON = await App.Requests.getContractJSON('PoolManager');
                            let abi = poolContractJSON.abi;
                            let address = poolContractJSON['networks'][networkId].address;
                            App.Controls.poolContract = new PoolContractV2(abi, networkId, address);
                            let tokenContractJSON = await App.Requests.getContractJSON('#{object.tokenName}');
                            abi = tokenContractJSON.abi;
                            address = tokenContractJSON['networks'][networkId].address;                            
                            App.Controls.tokenContract = new TokenContract(abi, networkId, address);
                            await App.Controls.poolContract.setContract();
                            await App.Controls.tokenContract.setContract();
                        }catch(e){
                            console.error(e);
                            throw e;
                        }
                    },
                    initNetworkData: async function(){
                        try{
                            const address = App.Controls.poolContract.accounts[0];
                            const balance = await App.Controls.tokenContract.balanceOf();
                            App.Controls.userAddress.text(address);
                            App.Controls.userTokensAvailable.text(balance);
                            
                        } catch(e){
                            console.error(e);
                            throw e;
                        }
                    },
                    bindEvents: function(){
                        App.Controls.createOfferBtn.on('click', App.Events.onCreateOfferBtnClick);
                    },
                    createNewOffer: async function(){
                        try {
                            const { amount, decimals, email, value } = await App.Validations.getCleanedOfferData();
                            await App.Controls.tokenContract.approve('#{poolContractAddress}', amount);
                            await App.Controls.poolContract.createOffer('#{object.key}', amount, decimals, value, email, '#{object.tokenAddress}');
                        } catch(e){
                            console.error(e);
                            throw e;
                        }
                    },
                },
                Events: {
                    onCreateOfferBtnClick: function(e){
                        const options = {
                            title: '¿Está seguro que desea enviar estos datos?',
                            type: 'warning',
                            showCancelButton: true,
                        };
                        Swal.fire(options)
                            .then( async (result) => {
                                if(result.value){
                                    try{
                                        await App.Methods.createNewOffer();
                                        window.location.replace("{% url 'tokens:pools-list' %}");
                                    }catch(e){
                                        console.log(e);
                                        Swal.fire({type:'warning', title: e.toString()});
                                    }
                                }
                            });
                    }
                },
                Requests:{
                    getContractJSON: function(contractName){
                        return $.ajax({
                            method: 'GET',
                            url: `/static/json/${contractName}.json`
                        });
                    },
                },
                Validations: {
                    getCleanedOfferData: async function(){
                        try{
                            const email = $('#email').val();
                            const value = parseFloat($('#value').val()) * 100;
                            if (App.Utils.countDecimals(value) > 2) throw Error('Error en valor de la oferta');
                            const { amount, decimals } = await App.Utils.transformToTokenAmount($('#amount').val());
                            return { amount, decimals, email, value };
                        } catch(e) {
                            console.error(e);
                            throw e;
                        }
                    },
                },
                Utils: {
                    countDecimals: function (value) {
                        try {
                            const decimals = value.toString().split(".")[1].length;
                            return decimals;
                        } catch(e){
                            return 0;
                        } 
                    },
                    transformToTokenAmount: async function(value){
                        try{
                            let decimals;
                            try{
                                decimals = await App.Controls.tokenContract.getDecimals();
                            } catch(e){
                                console.error(e);
                                decimals = 0;
                            }
                            const amount = parseFloat(value) * Math.pow(10, decimals);
                            return { amount, decimals };
                        } catch(e){
                            console.error(e);
                            throw e;
                        } 
                    }
                },
            };
            App.Methods.init();
        })()