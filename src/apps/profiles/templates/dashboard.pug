extends base_admin
- load static

block extra_css
    link(href="https://cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css", rel='stylesheet', type='text/css')
    style.
        #tableWithSearch{
            border-collapse: collapse;
        }

block content
    .row
        h1.m-l-20 Dashboard
    .row
        .col-lg-4.m-b-10
            .card.card-default.bg-primary
                .padding-20
                    .pull-left
                        h2.text-white.no-margin Ventas
                        hr
                    .clearfix                 
                    h3.text-white.total-sales(style='font-size:15px;')

        .col-lg-4.m-b-10
            .card.card-default.bg-complete
                .padding-20
                    .pull-left
                        h2.text-white.no-margin Tokens disponibles
                        hr
                    .clearfix
                    h3.total-available-for-paying.text-white(style='font-size:15px; font-weight:bold;')
        .col-lg-4.m-b-10
            .card.card-default.bg-info
                .padding-20
                    .pull-left
                        h2.text-white.no-margin Tipos de tokens disponibles
                        hr
                    .clearfix
                    ul
                        each token in token_types
                            li.text-white #{token.name}
    .row
        .col-lg-12.m-b-10.d-flex
            .card.no-border.card-condensed.no-margin.align-self-stretch.d-flex.flex-column
                .padding-25
                    h2.text-success.no-margin Pozos
                    p.no-margin Aquí tienes todos los pozos disponibles:
                    table#tableWithSearch.table.table-bordered(style='width:100%; margin-top: 1rem;')
                        thead
                            tr(role='row')
                                th Nombre del Pozo
                                th Nombre del Token
                                th Dirección del Token
                                th Cantidad de ofertas
                                th Fecha de apertura
                            tbody
                    .float-right
                        a(href='{% url "tokens:admin-create-pool" %}').btn.btn-primary.m-t-20.m-r-20 Nuevo Pozo
                        a(href='{% url "tokens:admin-create-token-type" %}').btn.btn-info.m-t-20 Nuevo Tipo de Token


block extra_js
    script(src="{% static 'pages/plugins/Datatables/datatables.min.js' %}", type='text/javascript')
    script(src='https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js')   
    script(src='https://cdn.datatables.net/responsive/2.1.0/js/dataTables.responsive.js')
    script(src='{% static "js/Contract.js" %}')
    script.
        (function(){
            var App = {
                Controls:{
                    Contract: null,
                    Table: $('table'),
                },
                init: function(){
                    App.initEvents();
                    App.bindEvents();
                },
                initEvents: async function(){
                    try{
                        App.Controls.Contract = await App.Events.initContract('PoolManager');
                        await App.initTable();
                        await App.Events.initData();
                    }
                    catch(e){
                        console.log(e);
                    }
                },
                initTable: function(){
                    const SETTINGS = {
                        "order": [],
                        "sDom": "<t><'row'<p i>>",
                        "destroy": true,
                        "scrollCollapse": true,
                        "responsive": true,
                        "createdRow": function(row, data, dataIndex){
                            $(row).attr('data-id', dataIndex + 1);
                        },
                        "oLanguage": {
                            "sLengthMenu": "Mostrar _MENU_ entradas",
                            "sInfo": "Mostrando <b>_START_ hasta _END_</b> de _TOTAL_ entradas",
                            "sInfoEmpty": "No hay entradas que mostrar",
                            "sInfoFiltered": " - filtrando de _MAX_ entradas",
                            "sEmptyTable": "No hay datos disponible en la tabla",
                            "sSearch": "Filtrar entradas"
                        },
                        "columnDefs": [
                        ],
                        "iDisplayLength": 10
                    };
                    App.Controls.Table.DataTable(SETTINGS);
                    },
                bindEvents: function(){
                    $('.btn-js-deposit').on('click', App.eventListeners.onBtnDepositClick);
                    $('.btn-js-withdraw').on('click', App.eventListeners.onBtnWithdrawClick);
                },
                eventListeners: {
                },
                Events:{
                    initContract: async function(contractName){
                        try{
                            const networkId = 5777;
                            let resp = await App.Requests.getContractJSON(contractName);
                            const { abi } = resp
                            const { address } = resp['networks'][networkId];
                            const contract = new PoolContractV2(abi, networkId, address);
                            await contract.setContract();
                            return contract;
                        }
                        catch(e){
                            throw e;
                        }
                    },
                    initData: async function(){
                        let keys = [];
                        {% for key in keys %}
                            keys.push('{{key}}');
                        {% endfor %}
                        if(!keys) return;
                        let pools = [];
                        try{
                            pools = await App.Controls.Contract.getAllPools(keys);
                        } catch(e){
                            console.log(e);
                        }
                        App.Methods.initSalesInfo(pools);
                        App.Methods.setDataToTable(pools);
                    }
                },
                Methods: {
                    initSalesInfo: function(pools){
                        App.Statistics.getMostTokenSoldPool(pools);
                        App.Statistics.getLargestTokenPool(pools);
                        App.Statistics.getAmountOfTrueTokens();

                    },
                    setDataToTable: function(pools){
                        const table = App.Controls.Table.DataTable();
                        for (const pool of pools){
                            if(pool['4'] === true){
                                table.row.add( [
                                pool['0'],
                                pool['1'],
                                pool['2'],
                                pool['offers'],
                                new Date(pool['3']*1000),
                                ] ).draw( false );
                            }
                        }
                    },
                },
                Requests: {
                    getContractJSON: function(contractName){
                        return $.ajax({
                            method: 'GET',
                            url: `/static/json/${contractName}.json`
                        });
                    },
                },
                Statistics: {
                    getMostTokenSoldPool: function(pools){
                        let amount = 0;
                        const maxPool = { amount: 0 };
                        for( const pool of pools ){
                            // get amount of tokens sold and the pool that sold the most tokens
                            let tokensInPool = parseInt(pool[7]);
                            amount += tokensInPool;
                            if ( tokensInPool > maxPool.amount ){
                                maxPool.name = pool[1];
                                maxPool.amount = tokensInPool;
                            }
                            else if(tokensInPool === maxPool.amount){
                                maxPool.name += `, ${pool[1]}`;
                            }
                        }
                        const goal = 200;
                        const percentage = (amount / goal);
                        
                        $('.total-sales-bar').css('width', `${percentage * 100}%`);
                        if(amount <= 0){
                            $('.total-sales').text('No se han vendido tokens todavia');
                        }
                        else{
                            $('.total-sales').text(`Cantidad de tokens vendidos: ${parseInt(amount)}`);
                            $('.top-pool').text(`El pozo que mas ha recaudado es: ${maxPool.name}, con: ${maxPool.amount} tokens`);
                            $('.progress-info-text').text(`${percentage * 100}% del total`);
                        }
                    },
                    getLargestTokenPool: function(pools){
                        let amount = 0;
                        const maxPool = { amount: 0 };
                        for( const pool of pools ){
                            // get amount of tokens sold and the pool that sold the most tokens
                            let availableTokens = parseInt(pool[2]);
                            amount += availableTokens;
                        }
                        if (amount <= 0)
                            $('.total-available').text('No se han vendido tokens');
                        else
                            $('.total-available').text(`Tokens disponibles para vender: ${amount}`);
                    },
                    getAmountOfTrueTokens: async function(){
                        const serverPoolAmount = `{{token_amount}}`;
                        if (!serverPoolAmount || serverPoolAmount <= 0)
                            $('.total-available-for-paying').text('No hay tokens disponibles para pagar');
                        else
                            $('.total-available-for-paying').text(`Tokens disponibles para pagos: ${serverPoolAmount}`);
                    },
                }
            }
            App.init();
        })()