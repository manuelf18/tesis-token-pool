extends base_admin
- load static utils

block extra_css
    style.
        .card {
            padding: 5%;
        }

block content
    h1(style='color:#004385') Dashboard
    .row
        .col-lg-12.m-b-10.d-flex
            .card.no-border.card-condensed.no-margin.align-self-stretch.d-flex.flex-column(style='box-shadow: 0 0 4px rgba(0, 0, 0, 0.15);')
                .row
                    .col-lg-6
                        h4 
                            span(style='color:#004385')
                                i.fa.fa-circle.m-r-10(style='font-size:20px')
                                | Actual token de pago: 
                            span #{paymentToken}
                        h4 
                            span(style='color:#004385')
                                i.fa.fa-circle.m-r-10(style='font-size:20px')
                                | Cantidad disponible: 
                            span #{token_amount | decimals}
                        h4 
                            span(style='color:#004385')
                                i.fa.fa-circle.m-r-10(style='font-size:20px')
                                | Puerto conectado: 
                            span #{port}
                    .col-lg-4.m-b-10
                        .card.card-default.bg-info
                            .padding-20
                                .pull-left
                                    h2.text-white.no-margin Tipos de tokens disponibles
                                    hr
                                .clearfix
                                ul
                                    each token in token_types
                                        li.text-white #{token.name}

                


block extra_js
    script.
        (function(){
            var App = {
                Controls:{
                    Contract: null,
                    Table: $('table'),
                },
                init: function(){
                    App.initEvents();
                    App.bindEvents();
                },
                initEvents: async function(){
                    try{
                        App.Controls.Contract = await App.Events.initContract('PoolManager');
                        await App.initTable();
                        await App.Events.initData();
                    }
                    catch(e){
                        console.log(e);
                    }
                },
                initTable: function(){
                    const SETTINGS = {
                        "order": [],
                        "sDom": "<t><'row'<p i>>",
                        "destroy": true,
                        "scrollCollapse": true,
                        "responsive": true,
                        "createdRow": function(row, data, dataIndex){
                            $(row).attr('data-id', dataIndex + 1);
                        },
                        "oLanguage": {
                            "sLengthMenu": "Mostrar _MENU_ entradas",
                            "sInfo": "Mostrando <b>_START_ hasta _END_</b> de _TOTAL_ entradas",
                            "sInfoEmpty": "No hay entradas que mostrar",
                            "sInfoFiltered": " - filtrando de _MAX_ entradas",
                            "sEmptyTable": "No hay datos disponible en la tabla",
                            "sSearch": "Filtrar entradas"
                        },
                        "columnDefs": [
                        ],
                        "iDisplayLength": 10
                    };
                    App.Controls.Table.DataTable(SETTINGS);
                },
                bindEvents: function(){
                    $('.btn-js-deposit').on('click', App.eventListeners.onBtnDepositClick);
                    $('.btn-js-withdraw').on('click', App.eventListeners.onBtnWithdrawClick);
                },
                eventListeners: {
                },
                Events:{
                    initContract: async function(contractName){
                        try{
                            const networkId = 5777;
                            let resp = await App.Requests.getContractJSON(contractName);
                            const { abi } = resp
                            const { address } = resp['networks'][networkId];
                            const contract = new PoolContractV2(abi, networkId, address);
                            await contract.setContract();
                            return contract;
                        }
                        catch(e){
                            throw e;
                        }
                    },
                    initData: async function(){
                        const pools = [];
                        {% for pool in pools %}
                            pools.push({
                                poolName: '{{pool.poolName}}',
                                tokenName: '{{pool.tokenName}}',
                                tokenAddress: '{{pool.tokenAddress}}',
                                startDate: '{{pool.startDate}}',
                                open: '{{pool.open}}',
                                key: '{{pool.key}}',
                                amountOfOffers: '{{pool.amountOfOffers}}',
                            });
                        {% endfor %}
                        App.Methods.initSalesInfo(pools);
                        App.Methods.setDataToTable(pools);
                    }
                },
                Methods: {
                    initSalesInfo: function(pools){
                        App.Statistics.getMostTokenSoldPool(pools);
                        App.Statistics.getLargestTokenPool(pools);
                        App.Statistics.getAmountOfTrueTokens();

                    },
                    setDataToTable: function(pools){
                        const table = App.Controls.Table.DataTable();
                        for (const pool of pools){
                            if(pool.open === 'True'){
                                table.row.add( [
                                pool.poolName,
                                pool.tokenName,
                                pool.tokenAddress,
                                pool.amountOfOffers,
                                pool.startDate,
                                ] ).draw( false );
                            }
                        }
                    },
                },
                Requests: {
                    getContractJSON: function(contractName){
                        return $.ajax({
                            method: 'GET',
                            url: `/static/json/${contractName}.json`
                        });
                    },
                },
                Statistics: {
                    getMostTokenSoldPool: function(pools){
                        let amount = 0;
                        const maxPool = { amount: 0 };
                        for( const pool of pools ){
                            // get amount of tokens sold and the pool that sold the most tokens
                            let tokensInPool = parseInt(pool[7]);
                            amount += tokensInPool;
                            if ( tokensInPool > maxPool.amount ){
                                maxPool.name = pool[1];
                                maxPool.amount = tokensInPool;
                            }
                            else if(tokensInPool === maxPool.amount){
                                maxPool.name += `, ${pool[1]}`;
                            }
                        }
                        const goal = 200;
                        const percentage = (amount / goal);
                        
                        $('.total-sales-bar').css('width', `${percentage * 100}%`);
                        if(amount <= 0){
                            $('.total-sales').text('No se han vendido tokens todavia');
                        }
                        else{
                            $('.total-sales').text(`Cantidad de tokens vendidos: ${parseInt(amount)}`);
                            $('.top-pool').text(`El pozo que mas ha recaudado es: ${maxPool.name}, con: ${maxPool.amount} tokens`);
                            $('.progress-info-text').text(`${percentage * 100}% del total`);
                        }
                    },
                    getLargestTokenPool: function(pools){
                        let amount = 0;
                        const maxPool = { amount: 0 };
                        for( const pool of pools ){
                            // get amount of tokens sold and the pool that sold the most tokens
                            let availableTokens = parseInt(pool[2]);
                            amount += availableTokens;
                        }
                        if (amount <= 0)
                            $('.total-available').text('No se han vendido tokens');
                        else
                            $('.total-available').text(`Tokens disponibles para vender: ${amount}`);
                    },
                    getAmountOfTrueTokens: async function(){
                        const serverPoolAmount = `{{token_amount}}`;
                        if (!serverPoolAmount || serverPoolAmount <= 0)
                            $('.total-available-for-paying').text('No hay tokens disponibles para pagar');
                        else
                            $('.total-available-for-paying').text(`Tokens disponibles para pagos: ${serverPoolAmount}`);
                    },
                }
            }
            App.init();
        })()